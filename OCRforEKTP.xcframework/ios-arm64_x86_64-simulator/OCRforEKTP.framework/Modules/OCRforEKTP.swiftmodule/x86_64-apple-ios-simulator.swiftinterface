// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.9.2 (swiftlang-5.9.2.2.56 clang-1500.1.0.2.5)
// swift-module-flags: -target x86_64-apple-ios13.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name OCRforEKTP
// swift-module-flags-ignorable: -enable-bare-slash-regex
import Foundation
import Swift
import UIKit
import Vision
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
extension Swift.String {
  public var digits: Swift.String {
    get
  }
}
extension Swift.String {
  public func replace(target: Swift.String, withString: Swift.String) -> Swift.String
  public func countOccurrences(ofStringArray stringArray: [Swift.String], inString string: Swift.String) -> Swift.Int
}
extension Swift.String {
  public var removeNonAlfaNumeric: Swift.String {
    get
  }
}
public class EKTPModel {
  public var image: UIKit.UIImage
  public var nama: Swift.String
  public var nik: Swift.String
  public var jenisKelamin: Swift.String
  public var tempatLahir: Swift.String
  public var tanggalLahir: Swift.String
  public var alamat: Swift.String
  public var rtrw: Swift.String
  public var kelurahan: Swift.String
  public var kecamatan: Swift.String
  public var agama: Swift.String
  public var statusPerkawinan: Swift.String
  public var kewarganegaraan: Swift.String
  public var provinsi: Swift.String
  public var kota: Swift.String
  public var pekerjaan: Swift.String
  public init(image: UIKit.UIImage = UIImage(), name: Swift.String = "", nik: Swift.String = "", gender: Swift.String = "", birthPlace: Swift.String = "", birthDate: Swift.String = "", address: Swift.String = "", rtrw: Swift.String = "", village: Swift.String = "", subDistrict: Swift.String = "", religion: Swift.String = "", maritalStatus: Swift.String = "", citizen: Swift.String = "", province: Swift.String = "", city: Swift.String = "", occupation: Swift.String = "")
  @objc deinit
}
public struct ScanResult {
  public var isValid: Swift.Bool?
  public var errorMessage: Swift.String?
  public var result: OCRforEKTP.EKTPModel
  public init(isValid: Swift.Bool? = true, errorMessage: Swift.String? = "", result: OCRforEKTP.EKTPModel = EKTPModel())
}
public struct StringRect {
}
public protocol OCRforEKTPDelegate : AnyObject {
  func scanEKTP(_ image: UIKit.UIImage) -> OCRforEKTP.ScanResult
}
public class OCRforEKTPLibrary : OCRforEKTP.OCRforEKTPDelegate {
  public init()
  public func scanEKTP(_ image: UIKit.UIImage) -> OCRforEKTP.ScanResult
  @objc deinit
}
public protocol EKTPScanDelegateProtocol : AnyObject {
  func didScanFinish(scanResult: OCRforEKTP.ScanResult)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class EKTPScanViewController : UIKit.UIViewController, UIKit.UIImagePickerControllerDelegate & UIKit.UINavigationControllerDelegate {
  @_Concurrency.MainActor(unsafe) public var delegate: (any OCRforEKTP.EKTPScanDelegateProtocol)?
  @_Concurrency.MainActor(unsafe) public var colorBorder: CoreGraphics.CGColor
  @_Concurrency.MainActor(unsafe) public var colorBackground: UIKit.UIColor
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor(unsafe) public func openCamera()
  @_Concurrency.MainActor(unsafe) @objc public func imagePickerController(_ picker: UIKit.UIImagePickerController, didFinishPickingMediaWithInfo info: [UIKit.UIImagePickerController.InfoKey : Any])
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
